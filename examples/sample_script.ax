// Sample AXScript - Bouncing Ball Demo
// This script demonstrates basic AXScript syntax and built-in functions

// Global variables
var ballSpeed = 150;
var direction = 1;
var bounceCount = 0;
var startTime = 0;

// Initialize the ball
function init() {
    print("Initializing bouncing ball demo...");
    startTime = time();
    
    // Set initial properties
    setProperty("color", "100,255,100"); // Green color
    setProperty("position", {x: 100, y: 300});
    
    print("Ball initialized at position (100, 300)");
}

// Main update function - called every frame
function update() {
    // Get current position
    var currentPos = getProperty("position");
    var x = currentPos.x;
    var y = currentPos.y;
    
    // Calculate movement
    var deltaTime = 0.016; // Approximate 60 FPS
    var moveDistance = ballSpeed * deltaTime * direction;
    
    // Move the ball horizontally
    move(moveDistance, 0);
    
    // Check boundaries and bounce
    if (x > 750) {
        direction = -1;
        bounceCount = bounceCount + 1;
        onBounce();
    } else if (x < 50) {
        direction = 1;
        bounceCount = bounceCount + 1;
        onBounce();
    }
    
    // Change color based on speed
    updateColor();
    
    // Print status every 100 bounces
    if (bounceCount % 100 == 0 && bounceCount > 0) {
        var elapsed = time() - startTime;
        print("Bounced " + bounceCount + " times in " + elapsed + " seconds");
    }
}

// Handle bounce event
function onBounce() {
    print("Bounce #" + bounceCount + " at position " + getProperty("position").x);
    
    // Slightly increase speed after each bounce
    ballSpeed = ballSpeed + 2;
    
    // Cap maximum speed
    if (ballSpeed > 300) {
        ballSpeed = 300;
    }
    
    // Change color temporarily
    setProperty("color", "255,100,100"); // Red flash
}

// Update color based on current speed
function updateColor() {
    var speedRatio = ballSpeed / 300; // Normalize speed (0-1)
    
    // Interpolate between green and blue based on speed
    var red = 100;
    var green = 255 - (speedRatio * 155); // 255 -> 100
    var blue = 100 + (speedRatio * 155);  // 100 -> 255
    
    var colorString = red + "," + green + "," + blue;
    setProperty("color", colorString);
}

// Collision handler
function onCollision(other) {
    print("Collided with object: " + other.name);
    
    // Reverse direction on collision
    direction = -direction;
    
    // Flash white
    setProperty("color", "255,255,255");
}

// Utility functions
function calculateDistance(x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    return sqrt(dx * dx + dy * dy);
}

function randomRange(min, max) {
    return min + random() * (max - min);
}

// Advanced movement pattern
function advancedMovement() {
    var currentTime = time() - startTime;
    var pos = getProperty("position");
    
    // Sine wave vertical movement
    var waveY = 300 + sin(currentTime * 2) * 100;
    setProperty("position", {x: pos.x, y: waveY});
    
    // Rotate the object
    rotate(0.05);
}

// Demonstration of conditional logic
function speedControl() {
    if (ballSpeed > 250) {
        print("Ball is moving very fast!");
        setProperty("color", "255,0,0"); // Red for fast
    } else if (ballSpeed > 180) {
        print("Ball is moving moderately fast");
        setProperty("color", "255,255,0"); // Yellow for medium
    } else {
        setProperty("color", "0,255,0"); // Green for slow
    }
}

// Loop demonstration
function countDown() {
    var i = 10;
    while (i > 0) {
        print("Countdown: " + i);
        i = i - 1;
    }
    print("Blast off!");
}

// Initialize the script
init();

// Example of using mathematical functions
var angle = 45;
var radians = angle * PI / 180;
print("Sin of 45 degrees: " + sin(radians));
print("Cos of 45 degrees: " + cos(radians));
print("Square root of 16: " + sqrt(16));
print("Absolute value of -5: " + abs(-5));
print("Minimum of 3, 1, 4: " + min(3, 1, 4));
print("Maximum of 3, 1, 4: " + max(3, 1, 4));
print("Random number: " + random());
